import PizzaBlock from '../PizzaBlock/index';
import Sort from '../Sort';
import Categories from '../Categories';
import { useEffect, useRef } from 'react';
import Skeleton from '../PizzaBlock/Skeleton';
import Pagination from '../Pagination';
import { useSelector } from 'react-redux';
import qs from 'qs';
import { useNavigate } from 'react-router-dom';
import {
  activePageSelector,
  filterSelector,
  setFilters,
} from '../redux/slices/filterSlice';
import { fetchPizza } from '../redux/slices/pizzaSlice';
import { RootState, useAppDispatch } from '../redux/store';

const Home: React.FC = () => {
  const { activeCategory, checked, sortValue, searchValue } =
    useSelector(filterSelector);
  const activePage = useSelector(activePageSelector);
  const dispatch = useAppDispatch();
  const { items, status } = useSelector((state: RootState) => state.pizza);
  const isSearch = useRef(false);
  const isMounted = useRef(false);
  const fetchData = async () => {
    dispatch(
      fetchPizza({
        activePage,
        checked,
        activeCategory,
        searchValue,
      })
    );
    window.scrollTo(0, 0);
  };
  const navigate = useNavigate();
  // –ü–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä,–µ—Å–ª–∏ –µ—Å—Ç—å query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ,–¢–æ–≥–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–Ω–æ—Å—è—Ç—Å—è –≤ —Ä–µ–¥–∞–∫—Å –∏ –∏–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä —É–∂–µ —Å –Ω–∏–º–∏
  useEffect(() => {
    if (window.location.search) {
      const params = qs.parse(window.location.search.substring(1));
      const obj = sortValue.find(
        (object: any) => object.searchTitle === params.checked
      );
      dispatch(setFilters({ ...params, checked: obj }));
      isSearch.current = true;
    }
  }, []);
  // –ü–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä,–µ—Å–ª–∏ –Ω–µ—Ç query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É—à–µ–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä,–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç

  useEffect(() => {
    if (isSearch.current === false) {
      fetchData();
    }
    isSearch.current = false;
  }, [checked, activeCategory, activePage, searchValue]);
  // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ isMounted.current –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ true,–ø–æ—Ç–æ–º –µ—Å–ª–∏ [checked, activeCategory, activePage] –º–µ–Ω—è—é—Ç—Å—è,—Ç–æ –≤—Å—Ç–∞–≤–ª—è—é—Ç—Å—è query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

  useEffect(() => {
    if (isMounted.current) {
      const str = qs.stringify({
        checked: checked.searchTitle,
        activeCategory,
        activePage,
      });
      navigate(`?${str}`);
    }
    isMounted.current = true;
  }, [checked, activeCategory, activePage]);
  return status === 'error' ? (
    <div className="content">
      <div className="container container--error">
        <div className="cart cart--error">
          <h2>
            –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ü—Ü—ã <span>üòï</span>
          </h2>
          <p>
            –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é,–ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ–µ
            –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.
            <br />
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ
          </p>
        </div>
      </div>
    </div>
  ) : (
    <div className="content">
      <div className="container">
        <div className="content__top">
          <Categories />
          <Sort />
        </div>
        <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
        <div className="content__items">
          {status === 'loading'
            ? [...new Array(4)].map((_, index) => <Skeleton key={index} />)
            : items.map((elem: any, i: number) => {
                return <PizzaBlock key={i} {...elem} />;
              })}
        </div>
        <Pagination />
      </div>
    </div>
  );
};
export default Home;
